plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'udpm.hn'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-mail:3.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // Redis
    implementation 'redis.clients:jedis:6.0.0'

    // Excel and PDF
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'com.github.librepdf:openpdf:1.3.30'

    // Utilities
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
    implementation 'commons-net:commons-net:3.9.0'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'commons-io:commons-io:2.15.0'
    implementation 'org.slf4j:slf4j-api:2.0.7'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Jackson
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // Mapping
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2:2.2.224'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Global encoding settings
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.fork = true
    options.forkOptions.jvmArgs = ['-Xmx1g', '-Dfile.encoding=UTF-8']
    options.compilerArgs += ["-Xlint:none"]
}

// Common test configuration
def commonTestConfig = { Test task ->
    task.useJUnitPlatform()
    task.systemProperty "file.encoding", "UTF-8"
    task.jvmArgs = ['-Dfile.encoding=UTF-8', '-Dsun.jnu.encoding=UTF-8', '-Duser.language=en', '-Duser.country=US']
    task.exclude "**/notification/service/impl/**"
}

// Apply common configuration to all test tasks
tasks.withType(Test) {
    commonTestConfig(it)
}

// Main test task
tasks.named('test') {
    commonTestConfig(it)
}

// Module-specific test tasks
task testAdmin(type: Test) {
    group = 'verification'
    description = 'Run admin module tests'
    include '**/core/admin/**/*Test*'
}

task testTeacher(type: Test) {
    group = 'verification'
    description = 'Run teacher module tests'
    include '**/core/teacher/**/*Test*'
}

task testStaff(type: Test) {
    group = 'verification'
    description = 'Run staff module tests'
    include '**/core/staff/**/*Test*'
}

task testStudent(type: Test) {
    group = 'verification'
    description = 'Run student module tests'
    include '**/core/student/**/*Test*'
}

task testAuth(type: Test) {
    group = 'verification'
    description = 'Run authentication module tests'
    include '**/core/authentication/**/*Test*'
}

task testHelpers(type: Test) {
    group = 'verification'
    description = 'Run helper class tests'
    include '**/helpers/*Test*'
}

// Fixed tests task with detailed reporting
task testFixed(type: Test) {
    group = 'verification'
    description = 'Run only tests that have been fixed and verified to work'

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }

    doLast {
        def report = project.file("${project.buildDir}/reports/tests/testFixed/index.html")
        println "\n============== Test Execution Summary ================"
        println "Detailed report: ${report}"
        println "See test results at: ${project.buildDir}/reports/tests/testFixed"
        println "======================================================"
    }

    // Include only fixed tests
    include '**/admin/levelproject/service/impl/ADLevelProjectManagementServiceImplTest*'
    include '**/helpers/RedisInvalidationHelperTest*'
    include '**/admin/facility/service/impl/AFFacilityServiceImplTest*'
    include '**/admin/facility/service/impl/AFFacilityIPServiceImplTest*'
    include '**/admin/facility/service/impl/AFFacilityLocationServiceImplTest*'
    include '**/admin/semester/service/impl/ADSemesterServiceImplTest*'
    include '**/admin/statistics/service/impl/ADStatisticsServiceImplTest*'
    include '**/admin/subject/service/impl/ADSubjectManagementServiceImplTest*'
    include '**/admin/subjectfacility/service/impl/ADSubjectFacilityServiceImplTest*'
    include '**/admin/useradmin/service/impl/ADUserAdminServiceImplTest*'
    include '**/admin/userstaff/service/impl/ADStaffServiceImplTest*'
}